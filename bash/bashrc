# .bashrc
export CONFIG_DIR=$HOME/config
export VENV_DIR=$HOME/venvs

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Pull in git tab completion
if [ -f ~/bash_completions/.git-completion.bash ]; then
    . ~/bash_completions/.git-completion.bash
fi

# Pull in docker tab completion
if [ -f ~/bash_completions/.docker-completion.bash ]; then
    . ~/bash_completions/.docker-completion.bash
fi

# Pull in kubernetes tab completion
if [ -f ~/bash_completions/kubectl ]; then
    . ~/bash_completions/kubectl
fi

export TERM='xterm-256color'
export GREP_COLOR="1;35"
export LESS="eirMX"

shopt -s histappend
export HISTFILE=${HOME}/.bash_history
export HISTTIMEFORMAT="[%Y/%m/%d %T] "
export HISTFILESIZE=1000000
export HISTSIZE=100000
export HISTIGNORE=ls:h:lt:l:d:..:[1-9]:1[0-4]
# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups
shopt -s cmdhist
VIRTUAL_ENV_DISABLE_PROMPT=1
#source $HOME/venv/bin/activate

export PROJECT_SOURCE_DIR=/home/jtran/projects/src


# When the shell exits, append to the history file instead of overwriting it

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -r"
# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
alias em='emacsclient -nw'
alias feh='find -iname .#*'

# ANSIcolorcodes
RS="\[\033[0m\]"            #reset
HC="\[\033[1m\]"            #hicolor
UL="\[\033[4m\]"            #underline
INV="\[\033[7m\]"           #inversebackgroundandforeground
FBLK="\[\033[30m\]"         #foregroundblack
FRED="\[\033[31:lm\]"       #foregroundred
FGRN="\[\033[32:lm\]"       #foregroundgreen
FYEL="\[\033[33:lm\]"       #foregroundyellow
FBLE="\[\033[34:lm\]"       #foregroundblue
FMAG="\[\033[35:lm\]"       #foregroundmagenta
FMAGB="\[\033[1;35m\]"      #inverseforegroundmagenta
FCYN="\[\033[36:1m\]"       #foregroundcyan
FWHT="\[\033[37m\]"         #foregroundwhite
BBLK="\[\033[40m\]"         #backgroundblack
BRED="\[\033[41m\]"         #backgroundred
BGRN="\[\033[42m\]"         #backgroundgreen
BYEL="\[\033[43m\]"         #backgroundyellow
BBLE="\[\033[44m\]"         #backgroundblue
BMAG="\[\033[45m\]"         #backgroundmagenta
BCYN="\[\033[46m\]"         #backgroundcyan
BWHT="\[\033[47m\]"         #backgroundwhite

# Define a function to update PS1
update_ps1() {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]; then
        local branch=$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo "(unknown)")
        PS1='\[\e[1;33m\]\u@\h\[\e[1;36m\] \w ->\n\[\e[1;32m\]\t\[\e[1;31m\] \!\[\e[1;34m\] ($(git symbolic-ref --short HEAD 2> /dev/null))'
    else
        PS1='\[\e[1;33m\]\u@\h\[\e[1;36m\] \w ->\n\[\e[1;32m\]\t\[\e[1;31m\] \!\[\e[1;34m\]'
    fi
    PS1=$PS1' \[\e[1;35m\]($(basename "$CONDA_PREFIX")) \$\[\e[m\] '
#    PS1=$PS1' \$\[\e[m\] '
}

# Set the initial prompt
update_ps1

# Define the PROMPT_COMMAND to update PS1 on each command execution
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}update_ps1"

# if [ -f ~/bash_completions/.git-prompt.sh ]; then
#     source ~/bash_completions/.git-prompt.sh
#     PS1='\[\e[1;33m\]\u@\h\[\e[1;36m\] \w ->\n\[\e[1;32m\]\t\[\e[1;31m\] \!\[\e[1;34m\] ($(__git_ps1 "%s")) \$\[\e[m\] '
# else
#     PS1='\[\e[1;33m\]\u@\h\[\e[1;36m\] \w ->\n\[\e[1;32m\]\t\[\e[1;31m\] \!\[\e[1;34m\] \$\[\e[m\] '
# fi

function gg()
{
    if test x$* = x ; then
        echo "gg - grep recursive for string in files at or below cwd"
        echo "Usage:"
        echo "        gg string"
    else
        find . -type f -exec grep $1 {} /dev/null \;
    fi
}

# # Pull in aliases
# if [ -f $CONFIG_DIR/bash/bash_aliases ]; then
#     . $CONFIG_DIR/bash/bash_aliases
# fi

gop() {
    local folder_name="$1"
    local project_folder="$HOME/projects"

    if [ -n "$folder_name" ]; then
        project_folder="$project_folder/$folder_name"
    fi

    if [ -d "$project_folder" ]; then
        pushd "$project_folder" >/dev/null
    else
        echo "Folder '$folder_name' does not exist under ~/projects/"
    fi
}

_gop_complete() {
    local projects_dir="$HOME/PROJECTS"
    local cur="${COMP_WORDS[COMP_CWORD]}"

    COMPREPLY=()
    if [ "$cur" == "$projects_dir" ]; then
        COMPREPLY+=("$cur/")
    fi

    local options
    options=$(find "$projects_dir" -maxdepth 1 -type d -printf '%f\n')

    COMPREPLY+=($(compgen -W "$options" -- "$cur"))
}

complete -F _gop_complete gop

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# alias tree='tree -C'
# alias ports='sudo netstat -lnptu'

function rm_build() {
    local git_dir="$(git rev-parse --show-toplevel)" # Get absolute path of top-level directory
    local current_dir="$(pwd)" # Get absolute path of current directory

    if [[ "${current_dir}" != "${git_dir}/build"* ]]; then # Check if current directory is under ${git_dir}/build
        echo "Error: You must run this function from a build folder nested under the top level folder of the Git project."
        return 1
    fi

    read -p "Are you sure you want to remove all contents of the build folder? (y/n): " choice
    if [[ "${choice}" == "y" ]]; then
        rm -rf "${current_dir}"/*
        echo "Build folder contents removed."
    fi
}

alias rm-build='rm_build'

go_build() {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]; then
        local git_dir="$(git rev-parse --show-toplevel)" # Get absolute path of top-level directory
        if [ ! -d "${git_dir}/build" ]; then # Check if ${git_dir}/build doesn't exist
            mkdir "${git_dir}/build" # Create ${git_dir}/build if it doesn't exist
        fi
        pushd "${git_dir}/build" > /dev/null # Change directory to ${git_dir}/build and push it onto the directory stack
    else
        echo "Not in a git directory; can't use function"

    fi
}

alias gob='go_build'

# Pull in aliases
if [ -f $CONFIG_DIR/bash/docker_aliases ]; then
    . $CONFIG_DIR/bash/docker_aliases
fi

# Home and end buttons move to beginning and end of line
# bind "\e[1~": beginning-of-line
# bind "\e[4~": end-of-line

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/j.tran/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/j.tran/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/j.tran/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/j.tran/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

